import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, BotCommandScopeAllPrivateChats, BotCommandScopeChat
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import BaseFilter, Command
from config import BOT_TOKEN, ADMIN_ID
from database import (
    init_db, get_categories, get_products_by_category, get_product,
    add_to_cart, get_cart_items, clear_cart, create_order,
    get_pending_orders, get_order_items, add_category, add_product,
    delete_category, delete_product
)

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ üìã", callback_data="catalog")],
    [InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ üõí", callback_data="cart")],
    [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ùì", callback_data="support")],
])

class CatalogStates(StatesGroup):
    browsing_category = State()

class OrderStates(StatesGroup):
    name = State()
    phone = State()
    city = State()
    delivery_method = State()
    payment_method = State()

class SupportStates(StatesGroup):
    waiting_for_question = State()

class AddProductStates(StatesGroup):
    category = State()
    name = State()
    description = State()
    price = State()
    photo = State()

class AddCategoryStates(StatesGroup):
    name = State()
    gender = State()

class AdminFilter(BaseFilter):
    async def __call__(self, message: types.Message) -> bool:
        return message.from_user.id == ADMIN_ID

@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –¥–≤–æ—Ä–µ—Ü–∫–∏–π! ü§ñ", reply_markup=main_menu)

@dp.callback_query(F.data == "catalog")
async def show_catalog(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–∞—è üëî", callback_data="gender_catalog_–ú—É–∂—Å–∫–∞—è")],
        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∞—è üëó", callback_data="gender_catalog_–ñ–µ–Ω—Å–∫–∞—è")],
        [InlineKeyboardButton(text="–î–µ—Ç—Å–∫–∞—è üßí", callback_data="gender_catalog_–î–µ—Ç—Å–∫–∞—è")],
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("gender_catalog_"))
async def show_gender_categories(callback: types.CallbackQuery):
    gender = callback.data.split("_")[-1]
    categories = await get_categories(gender=gender)
    if not categories:
        await callback.message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ.")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat[1], callback_data=f"category_{cat[0]}")] for cat in categories
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await callback.answer()

@dp.message(AddCategoryStates.name)
async def process_category_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–∞—è", callback_data="gender_–ú—É–∂—Å–∫–∞—è")],
        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∞—è", callback_data="gender_–ñ–µ–Ω—Å–∫–∞—è")],
        [InlineKeyboardButton(text="–î–µ—Ç—Å–∫–∞—è", callback_data="gender_–î–µ—Ç—Å–∫–∞—è")],
    ])
    await state.set_state(AddCategoryStates.gender)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("gender_"))
async def process_category_gender(callback: types.CallbackQuery, state: FSMContext):
    gender = callback.data.split("_")[1]
    data = await state.get_data()
    await add_category(data["name"], gender)
    await callback.message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{data['name']}' ({gender}) –¥–æ–±–∞–≤–ª–µ–Ω–∞. ‚úÖ")
    await state.clear()
    await callback.answer()

@dp.message(AdminFilter(), Command("add_category"))
async def start_add_category(message: types.Message, state: FSMContext):
    await state.set_state(AddCategoryStates.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: üìÇ")

@dp.callback_query(F.data.startswith("category_"))
async def show_products(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[1])
    products = await get_products_by_category(category_id)
    if not products:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. üòî")
        return
    product_ids = [p[0] for p in products]
    await state.update_data(category_id=category_id, product_ids=product_ids, current_index=0)
    await show_product(callback.message, state)
    await callback.answer()

async def show_product(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_ids = data['product_ids']
    current_index = data['current_index']
    product_id = product_ids[current_index]
    product = await get_product(product_id)
    text = f"<b>{product[2]}</b> üõçÔ∏è\n{product[3]}\n–¶–µ–Ω–∞: {product[4]} —Ä—É–±. üí∏"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõí", callback_data=f"add_to_cart_{product_id}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="previous"), InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next")],
        [InlineKeyboardButton(text="–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º üìã", callback_data="catalog")]
    ])
    await message.answer_photo(photo=product[5], caption=text, reply_markup=keyboard)

@dp.callback_query(F.data == "next")
async def next_product(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data['current_index']
    product_ids = data['product_ids']
    if current_index < len(product_ids) - 1:
        await state.update_data(current_index=current_index + 1)
        await show_product(callback.message, state)
    else:
        await callback.answer("–ë–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç. üõë")
    await callback.answer()

@dp.callback_query(F.data == "previous")
async def prev_product(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data['current_index']
    if current_index > 0:
        await state.update_data(current_index=current_index - 1)
        await show_product(callback.message, state)
    else:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä. ‚èÆÔ∏è")
    await callback.answer()

@dp.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart_handler(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    await add_to_cart(user_id, product_id)
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! ‚úÖ")

@dp.callback_query(F.data == "cart")
async def show_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cart_items = await get_cart_items(user_id)
    if not cart_items:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. üõí")
        return
    text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: üõçÔ∏è\n"
    total = 0
    for item in cart_items:
        product = await get_product(item['product_id'])
        text += f"{product[2]} x {item['quantity']} - {product[4] * item['quantity']} —Ä—É–±. üí∏\n"
        total += product[4] * item['quantity']
    text += f"–ò—Ç–æ–≥–æ: {total} —Ä—É–±. üí∞"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üì¶", callback_data="checkout")],
        [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É üóëÔ∏è", callback_data="clear_cart")]
    ])
    await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "clear_cart")
async def clear_cart_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await clear_cart(user_id)
    await callback.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. üßπ")
    await callback.answer()

@dp.callback_query(F.data == "checkout")
async def start_checkout(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cart_items = await get_cart_items(user_id)
    if not cart_items:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. üõí")
        return
    await state.set_state(OrderStates.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ‚úçÔ∏è")
    await callback.answer()

@dp.message(OrderStates.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(OrderStates.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: üìû")

@dp.message(OrderStates.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(OrderStates.city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥: üèôÔ∏è")

@dp.message(OrderStates.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(OrderStates.delivery_method)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: –õ–∏—á–Ω–æ –∏–ª–∏ –æ–Ω–ª–∞–π–Ω (–¥–æ—Å—Ç–∞–≤–∫–∞, –°–î–≠–ö, –ê–≤–∏—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∞): üöö")

@dp.message(OrderStates.delivery_method)
async def process_delivery(message: types.Message, state: FSMContext):
    await state.update_data(delivery_method=message.text)
    await state.set_state(OrderStates.payment_method)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üí≥")

@dp.message(OrderStates.payment_method)
async def process_payment_method(message: types.Message, state: FSMContext):
    await state.update_data(payment_method=message.text)
    data = await state.get_data()
    user_id = message.from_user.id
    order_id = await create_order(user_id, data)
    items = await get_order_items(order_id)
    order_summary = ""
    total = 0
    for item in items:
        product = await get_product(item['product_id'])
        subtotal = item['price_at_purchase'] * item['quantity']
        total += subtotal
        order_summary += f"{product[2]} x {item['quantity']} ‚Äî {subtotal} —Ä—É–±. üí∏\n"
    admin_text = (
        f"<b>üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"<b>üë§ –ò–º—è:</b> {data['name']}\n"
        f"<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
        f"<b>üèô –ì–æ—Ä–æ–¥:</b> {data['city']}\n"
        f"<b>üöö –î–æ—Å—Ç–∞–≤–∫–∞:</b> {data['delivery_method']}\n"
        f"<b>üí≥ –û–ø–ª–∞—Ç–∞:</b> {data['payment_method']}\n\n"
        f"<b>üõí –¢–æ–≤–∞—Ä—ã:</b>\n{order_summary}\n"
        f"<b>–ò—Ç–æ–≥–æ:</b> {total} —Ä—É–±. üí∞"
    )
    await bot.send_message(ADMIN_ID, admin_text)
    await message.answer(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üéâ\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. üìû")
    await state.clear()

@dp.callback_query(F.data == "support")
async def start_support(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SupportStates.waiting_for_question)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å: ‚ùì")
    await callback.answer()

@dp.message(SupportStates.waiting_for_question)
async def forward_to_admin(message: types.Message, state: FSMContext):
    await bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. ‚úÖ")
    await state.clear()

@dp.message(AdminFilter(), Command("add_product"))
async def start_add_product(message: types.Message, state: FSMContext):
    categories = await get_categories()
    if not categories:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é /add_category. ‚ö†Ô∏è")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat[1], callback_data=f"add_product_cat_{cat[0]}")] for cat in categories
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: üìã", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("add_product_cat_"))
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[3])
    await state.update_data(category_id=category_id)
    await state.set_state(AddProductStates.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ‚úçÔ∏è")
    await callback.answer()

@dp.message(AddProductStates.name)
async def process_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddProductStates.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: üìù")

@dp.message(AddProductStates.description)
async def process_product_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddProductStates.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö): üí∞")

@dp.message(AddProductStates.price)
async def process_product_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await state.set_state(AddProductStates.photo)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞: üì∏")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ). ‚ö†Ô∏è")

@dp.message(AddProductStates.photo, F.photo)
async def process_product_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    data = await state.get_data()
    await add_product(data['category_id'], data['name'], data['description'], data['price'], file_id)
    await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ")
    await state.clear()

@dp.message(AdminFilter(), Command("delete_category"))
async def start_delete_category(message: types.Message):
    categories = await get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. üì≠")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat[1], callback_data=f"delete_category_{cat[0]}")] for cat in categories
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ‚ùå", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("delete_category_"))
async def confirm_delete_category(callback: types.CallbackQuery):
    category_id = int(callback.data.split("_")[2])
    await delete_category(category_id)
    await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–µ –µ—ë —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã. ‚úÖ")
    await callback.answer()

@dp.message(AdminFilter(), Command("delete_product"))
async def start_delete_product(message: types.Message):
    categories = await get_categories()
    if not categories:
        await message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å–Ω–∞—á–∞–ª–∞. ‚ö†Ô∏è")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat[1], callback_data=f"select_delete_prod_cat_{cat[0]}")] for cat in categories
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞: üóÇÔ∏è", reply_markup=keyboard)


@dp.message(AdminFilter(), Command("add_category"))
async def start_add_category(message: types.Message, state: FSMContext):
    await state.set_state(AddCategoryStates.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: üìÇ")

@dp.message(AddCategoryStates.name)
async def process_category_name(message: types.Message, state: FSMContext):
    await add_category(message.text)
    await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{message.text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞. ‚úÖ")
    await state.clear()


@dp.callback_query(F.data.startswith("select_delete_prod_cat_"))
async def show_products_for_deletion(callback: types.CallbackQuery):
    category_id = int(callback.data.split("_")[-1])
    products = await get_products_by_category(category_id)
    if not products:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. üì≠")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=p[2], callback_data=f"delete_product_{p[0]}")] for p in products
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ‚ùå", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_product_"))
async def confirm_delete_product(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[2])
    await delete_product(product_id)
    await callback.message.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω. ‚úÖ")
    await callback.answer()

async def main():
    await init_db()

    admin_commands = [
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üöÄ"),
        BotCommand(command="/add_category", description="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é üìÇ"),
        BotCommand(command="/delete_category", description="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚ùå"),
        BotCommand(command="/add_product", description="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä üõçÔ∏è"),
        BotCommand(command="/delete_product", description="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä ‚ùå"),
    ]
    await bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=ADMIN_ID))

    user_commands = [
        BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üöÄ"),
    ]
    await bot.set_my_commands(user_commands, scope=BotCommandScopeAllPrivateChats())

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
