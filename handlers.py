from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message  # –î–æ–±–∞–≤–ª–µ–Ω CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from states import OrderStates, SupportStates, AddProductStates, AddCategoryStates
from database import get_categories, get_products_by_category, get_product, add_to_cart, get_cart_items, clear_cart, create_order, get_order_items, add_category, add_product, delete_category, delete_product
from config import ADMIN_ID
import aiosqlite

# –ò–º–ø–æ—Ä—Ç bot –∏–∑ main.py (—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ bot)
from main import bot

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ üìã", callback_data="catalog")],
    [InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ üõí", callback_data="cart")],
    [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ùì", callback_data="support")],
])

class AdminFilter:
    async def __call__(self, message) -> bool:
        return message.from_user.id == ADMIN_ID

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def cmd_start(message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –∞—Å—Å–µ—Ç–æ–≤ —Å Sketchfab –∏ ArtStation! ü§ñ", reply_markup=main_menu)


async def show_catalog(callback: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="Free Assets üÜì", callback_data="section_catalog_free"),
            InlineKeyboardButton(text="Paid Assets üí∞", callback_data="section_catalog_paid")
        ],
        [InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ üõí", callback_data="cart")],
        [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ùì", callback_data="support")]
    ])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if callback.message.text:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –µ—Å—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=keyboard)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback-–∑–∞–ø—Ä–æ—Å–∞
    await callback.answer()

async def show_section_categories(callback, state: FSMContext):
    section = callback.data.split("_")[-1]
    categories = await get_categories(section=section)
    if not categories:
        await callback.message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ.")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat[1], callback_data=f"category_{cat[0]}")] for cat in categories
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await callback.answer()

async def process_category_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Free", callback_data="section_free")],
        [InlineKeyboardButton(text="Paid", callback_data="section_paid")],
    ])
    await state.set_state(AddCategoryStates.section)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=keyboard)

async def process_category_section(callback: types.CallbackQuery, state: FSMContext):
    section = callback.data.split("_")[1]
    data = await state.get_data()
    await add_category(data["name"], section)
    await callback.message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{data['name']}' ({section}) –¥–æ–±–∞–≤–ª–µ–Ω–∞. ‚úÖ")
    await state.clear()
    await callback.answer()

async def start_add_category(message: types.Message, state: FSMContext):
    await state.set_state(AddCategoryStates.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: üìÇ")

async def show_products(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[1])
    products = await get_products_by_category(category_id)
    if not products:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∞—Å—Å–µ—Ç–æ–≤. üòî")
        return
    product_ids = [p[0] for p in products]
    await state.update_data(category_id=category_id, product_ids=product_ids, current_index=0)
    await show_product(callback.message, state)  # –ü–µ—Ä–µ–¥–∞–µ–º state
    await callback.answer()

async def show_product(message: Message, state: FSMContext):
    data = await state.get_data()
    product_ids = data['product_ids']
    current_index = data['current_index']
    product_id = product_ids[current_index]
    product = await get_product(product_id)
    if product[4] == 0:
        price_text = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ üéÅ"
    else:
        price_text = f"–¶–µ–Ω–∞: {product[4]} —Ä—É–±. üí∏"
    text = f"<b>{product[2]}</b> üõçÔ∏è\n{product[3]}\n{price_text}"
    if product[4] == 0:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤ üåê", callback_data=f"get_asset_{product_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="previous"), InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next")],
            [InlineKeyboardButton(text="–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º üìã", callback_data="catalog")]
        ])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõí", callback_data=f"add_to_cart_{product_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="previous"), InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next")],
            [InlineKeyboardButton(text="–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º üìã", callback_data="catalog")]
        ])
    await message.answer_photo(photo=product[5], caption=text, reply_markup=keyboard)

async def next_product(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data['current_index']
    product_ids = data['product_ids']
    if current_index < len(product_ids) - 1:
        await state.update_data(current_index=current_index + 1)
        await show_product(callback.message)
    else:
        await callback.answer("–ë–æ–ª—å—à–µ –∞—Å—Å–µ—Ç–æ–≤ –Ω–µ—Ç. üõë")
    await callback.answer()

async def prev_product(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data['current_index']
    if current_index > 0:
        await state.update_data(current_index=current_index - 1)
        await show_product(callback.message)
    else:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π –∞—Å—Å–µ—Ç. ‚èÆÔ∏è")
    await callback.answer()

async def add_to_cart_handler(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    await add_to_cart(user_id, product_id)
    await callback.answer("–ê—Å—Å–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! ‚úÖ")


async def process_product_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π üéÅ", callback_data="product_type_free")],
        [InlineKeyboardButton(text="–ü–ª–∞—Ç–Ω—ã–π üí∞", callback_data="product_type_paid")],
    ])
    await state.set_state(AddProductStates.is_free)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Å—Å–µ—Ç–∞:", reply_markup=keyboard)


async def send_asset_url(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[2])
    product = await get_product(product_id)
    if product[4] == 0:
        await callback.message.answer(f"–í–æ—Ç –≤–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞—Å—Å–µ—Ç: {product[6]} üåü")
    else:
        await callback.message.answer("–≠—Ç–æ—Ç –∞—Å—Å–µ—Ç –ø–ª–∞—Ç–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É. üõí")
    await callback.answer()

async def show_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cart_items = await get_cart_items(user_id)
    if not cart_items:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. üõí")
        return
    text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: üõçÔ∏è\n"
    total = 0
    for item in cart_items:
        product = await get_product(item['product_id'])
        text += f"{product[2]} x {item['quantity']} - {product[4] * item['quantity']} —Ä—É–±. üí∏\n"
        total += product[4] * item['quantity']
    text += f"–ò—Ç–æ–≥–æ: {total} —Ä—É–±. üí∞"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üì¶", callback_data="checkout")],
        [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É üóëÔ∏è", callback_data="clear_cart")]
    ])
    await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()

async def clear_cart_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await clear_cart(user_id)
    await callback.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. üßπ")
    await callback.answer()

async def start_checkout(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cart_items = await get_cart_items(user_id)
    if not cart_items:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. üõí")
        return
    await state.set_state(OrderStates.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ‚úçÔ∏è")
    await callback.answer()

async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(OrderStates.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: üìû")

async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(OrderStates.city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥: üèôÔ∏è")

async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(OrderStates.delivery_method)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: üöö")

async def process_delivery(message: types.Message, state: FSMContext):
    await state.update_data(delivery_method=message.text)
    await state.set_state(OrderStates.payment_method)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üí≥")

async def process_payment_method(message: types.Message, state: FSMContext):
    await state.update_data(payment_method=message.text)
    data = await state.get_data()
    user_id = message.from_user.id
    order_id = await create_order(user_id, data)
    items = await get_order_items(order_id)
    order_summary = ""
    total = 0
    for item in items:
        product = await get_product(item['product_id'])
        subtotal = item['price_at_purchase'] * item['quantity']
        total += subtotal
        order_summary += f"{product[2]} x {item['quantity']} ‚Äî {subtotal} —Ä—É–±. üí∏\n"
    admin_text = (
        f"<b>üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"<b>üë§ –ò–º—è:</b> {data['name']}\n"
        f"<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
        f"<b>üèô –ì–æ—Ä–æ–¥:</b> {data['city']}\n"
        f"<b>üöö –î–æ—Å—Ç–∞–≤–∫–∞:</b> {data['delivery_method']}\n"
        f"<b>üí≥ –û–ø–ª–∞—Ç–∞:</b> {data['payment_method']}\n\n"
        f"<b>üõí –ê—Å—Å–µ—Ç—ã:</b>\n{order_summary}\n"
        f"<b>–ò—Ç–æ–≥–æ:</b> {total} —Ä—É–±. üí∞"
    )
    await bot.send_message(ADMIN_ID, admin_text)
    await message.answer(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üéâ\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. üìû")
    await state.clear()

async def start_support(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SupportStates.waiting_for_question)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å: ‚ùì")
    await callback.answer()

async def forward_to_admin(message: types.Message, state: FSMContext):
    await bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. ‚úÖ")
    await state.clear()

async def start_add_product(message: types.Message, state: FSMContext):
    categories = await get_categories()
    if not categories:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é /add_category. ‚ö†Ô∏è")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat[1], callback_data=f"add_product_cat_{cat[0]}")] for cat in categories
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: üìã", reply_markup=keyboard)

async def select_category(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[3])
    await state.update_data(category_id=category_id)
    await state.set_state(AddProductStates.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Å—Å–µ—Ç–∞: ‚úçÔ∏è")
    await callback.answer()

async def process_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddProductStates.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Å—Å–µ—Ç–∞: üìù")

async def process_product_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddProductStates.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞—Å—Å–µ—Ç–∞ (0 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö): üí∞")

async def process_product_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        if price < 0:
            await message.answer("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. ‚ö†Ô∏è")
            return
        await state.update_data(price=price)
        is_free = 1 if price == 0 else 0
        await state.update_data(is_free=is_free)
        await state.set_state(AddProductStates.photo)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞—Å—Å–µ—Ç–∞: üì∏")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. ‚ö†Ô∏è")


async def process_product_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    await state.update_data(photo=file_id)
    await state.set_state(AddProductStates.asset_url)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –∞—Å—Å–µ—Ç–∞: üåê")

async def process_asset_url(message: types.Message, state: FSMContext):
    data = await state.get_data()
    asset_url = message.text
    await add_product(data['category_id'], data['name'], data['description'],
                      data['price'], data['photo'], asset_url, data['is_free'])
    await message.answer("–ê—Å—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ")
    await state.clear()

async def start_delete_category(message: types.Message):
    categories = await get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. üì≠")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat[1], callback_data=f"delete_category_{cat[0]}")] for cat in categories
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ‚ùå", reply_markup=keyboard)

async def confirm_delete_category(callback: types.CallbackQuery):
    category_id = int(callback.data.split("_")[2])
    await delete_category(category_id)
    await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–µ –µ—ë –∞—Å—Å–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã. ‚úÖ")
    await callback.answer()

async def start_delete_product(message: types.Message):
    categories = await get_categories()
    if not categories:
        await message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å–Ω–∞—á–∞–ª–∞. ‚ö†Ô∏è")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat[1], callback_data=f"select_delete_prod_cat_{cat[0]}")] for cat in categories
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞—Å—Å–µ—Ç–∞: üóÇÔ∏è", reply_markup=keyboard)

async def show_products_for_deletion(callback: types.CallbackQuery):
    category_id = int(callback.data.split("_")[-1])
    products = await get_products_by_category(category_id)
    if not products:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∞—Å—Å–µ—Ç–æ–≤. üì≠")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=p[2], callback_data=f"delete_product_{p[0]}")] for p in products
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ‚ùå", reply_markup=keyboard)
    await callback.answer()

async def confirm_delete_product(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[2])
    await delete_product(product_id)
    await callback.message.answer("–ê—Å—Å–µ—Ç —É–¥–∞–ª—ë–Ω. ‚úÖ")
    await callback.answer()