from aiogram import types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from main import bot
from states import CatalogStates, OrderStates, SupportStates, AddProductStates, AddCategoryStates, AddBalanceStates, \
    UserAddBalanceStates
from database import get_categories, get_products_by_category, get_product, add_to_cart, get_cart_items, clear_cart, \
    create_order, get_order_items, add_category, add_product, delete_category, delete_product, get_user_balance, \
    update_user_balance
from config import ADMIN_ID
import aiosqlite
import logging
import asyncio
import requests

logging.basicConfig(level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ üìã", callback_data="catalog")],
    [InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ üõí", callback_data="cart")],
    [InlineKeyboardButton(text="–ë–∞–ª–∞–Ω—Å üí∞", callback_data="balance")],
    [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ùì", callback_data="support")],
])


# –§–∏–ª—å—Ç—Ä –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class AdminFilter:
    async def __call__(self, message: types.Message) -> bool:
        return message.from_user.id == ADMIN_ID


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π/–∞—Å—Å–µ—Ç–æ–≤ –∏ –≤—Å–µ–≥–æ —Ä–∞–∑–Ω–æ–≥–æ –∏–∑ –º–∏—Ä–∞ 3–¥! ü§ñ",
                         reply_markup=main_menu)


# –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥
async def show_catalog(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ Assets üÜì", callback_data="section_catalog_free"),
            InlineKeyboardButton(text="–ü–ª–∞—Ç–Ω—ã–µ Assets üí∞", callback_data="section_catalog_paid")
        ],
        [InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞ üõí", callback_data="cart")],
        [InlineKeyboardButton(text="–ë–∞–ª–∞–Ω—Å üí∞", callback_data="balance")],
        [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚ùì", callback_data="support")]
    ])
    if callback.message.text:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=keyboard)
    else:
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=keyboard)
    await callback.answer()


# –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
async def show_balance(callback: types.CallbackQuery):
    balance = await get_user_balance(callback.from_user.id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="top_up_balance")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu")]
    ])
    await callback.message.edit_text(f"üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n20:53\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.",
                                     reply_markup=keyboard)
    await callback.answer()


# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async def start_top_up_balance(callback: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –†—É—á–Ω–æ–π –≤–≤–æ–¥", callback_data="manual_top_up")],
        [InlineKeyboardButton(text="üí∏ –°–ë–ü (–Æ–∫–∞—Å—Å–∞)", callback_data="yookassa_sbp")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=keyboard)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
async def start_manual_top_up(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserAddBalanceStates.amount)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: üí∞")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É –∏ –°–ë–ü
async def start_yookassa_sbp(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserAddBalanceStates.amount)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –°–ë–ü (–Æ–∫–∞—Å—Å–∞): üí∏")
    await state.update_data(payment_method="yookassa_sbp")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
async def process_top_up_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. ‚ö†Ô∏è")
            return
        data = await state.get_data()
        payment_method = data.get("payment_method", "manual")
        user_id = message.from_user.id

        if payment_method == "yookassa_sbp":
            await state.update_data(amount=amount)
            await state.set_state(UserAddBalanceStates.yookassa_payment)
            payment_url = await create_yookassa_payment(user_id, amount)
            if payment_url:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –°–ë–ü", url=payment_url)],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu")]
                ])
                await message.answer(f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã {amount:.2f} —Ä—É–±. —á–µ—Ä–µ–∑ –°–ë–ü:\n{payment_url}",
                                     reply_markup=keyboard)
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ö†Ô∏è")
                await state.clear()
        else:
            success = await update_user_balance(user_id, amount)
            if success:
                new_balance = await get_user_balance(user_id)
                await message.answer(
                    f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} —Ä—É–±. ‚úÖ\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} —Ä—É–±. üí∞")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. ‚ö†Ô∏è")
            await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. ‚ö†Ô∏è")


# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É
async def create_yookassa_payment(user_id, amount):
    shop_id = "your_shop_id"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Shop ID –æ—Ç –Æ–∫–∞—Å—Å—ã
    secret_key = "your_secret_key"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    url = "https://api.yookassa.ru/v3/payments"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Basic {secret_key}"
    }
    payload = {
        "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
        "capture": True,
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
        "payment_method_data": {"type": "sbp"},
        "confirmation": {
            "type": "redirect",
            "return_url": "https://your-bot-domain.com/return"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
        },
        "metadata": {"user_id": user_id}
    }
    response = requests.post(url, json=payload, headers=headers)
    if response.status_code == 200:
        return response.json().get("confirmation", {}).get("confirmation_url")
    return None


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É
async def handle_yookassa_return(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    amount = data.get("amount")
    user_id = callback.from_user.id
    success = True  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    if success:
        await update_user_balance(user_id, amount)
        new_balance = await get_user_balance(user_id)
        await callback.message.answer(
            f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} —Ä—É–±. ‚úÖ\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.2f} —Ä—É–±. üí∞")
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ö†Ô∏è")
    await state.clear()
    await callback.answer()


# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def start_add_balance(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(AddBalanceStates.user_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: üÜî")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def process_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await state.set_state(AddBalanceStates.balance_amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: üí∞")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ‚ö†Ô∏è")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def process_balance_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. ‚ö†Ô∏è")
            return
        data = await state.get_data()
        user_id = data['user_id']
        success = await update_user_balance(user_id, amount)
        if success:
            await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} —Ä—É–±. ‚úÖ")
            await bot.send_message(user_id,
                                   f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} —Ä—É–±. üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {await get_user_balance(user_id):.2f} —Ä—É–±.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. ‚ö†Ô∏è")
        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. ‚ö†Ô∏è")


# –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–∑–¥–µ–ª–∞
async def show_section_categories(callback: types.CallbackQuery, state: FSMContext):
    section = callback.data.split("_")[-1]
    categories = await get_categories(section=section)
    if not categories:
        await callback.message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ.")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat[1], callback_data=f"category_{cat[0]}")] for cat in categories
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await callback.answer()


async def process_category_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ë–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="section_free")],
        [InlineKeyboardButton(text="–ü–ª–∞—Ç–Ω–æ", callback_data="section_paid")],
    ])
    await state.set_state(AddCategoryStates.section)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=keyboard)


async def process_category_section(callback: types.CallbackQuery, state: FSMContext):
    section = callback.data.split("_")[1]
    data = await state.get_data()
    await add_category(data["name"], section)
    await callback.message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{data['name']}' ({section}) –¥–æ–±–∞–≤–ª–µ–Ω–∞. ‚úÖ")
    await state.clear()
    await callback.answer()


async def start_add_category(message: types.Message, state: FSMContext):
    await state.set_state(AddCategoryStates.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: üìÇ")


async def show_products(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[1])
    products = await get_products_by_category(category_id)
    if not products:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∞—Å—Å–µ—Ç–æ–≤. üòî")
        return
    product_ids = [p[0] for p in products]
    await state.update_data(category_id=category_id, product_ids=product_ids, current_index=0)
    await state.set_state(CatalogStates.browsing_category)
    await show_product(callback.message, state)
    await callback.answer()


async def show_product(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_ids = data['product_ids']
    current_index = data['current_index']
    product_id = product_ids[current_index]
    product = await get_product(product_id)
    if product[4] == 0:
        price_text = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ üéÅ"
    else:
        price_text = f"–¶–µ–Ω–∞: {product[4]:.2f} —Ä—É–±. üí∏"
    text = f"<b>{product[2]}</b> üõçÔ∏è\n{product[3]}\n{price_text}"
    if product[4] == 0:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤ üåê", callback_data=f"get_asset_{product_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="previous"),
             InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next")],
            [InlineKeyboardButton(text="–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º üìã", callback_data="catalog")]
        ])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõí", callback_data=f"add_to_cart_{product_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="previous"),
             InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next")],
            [InlineKeyboardButton(text="–ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º üìã", callback_data="catalog")]
        ])
    await message.answer_photo(photo=product[5], caption=text, reply_markup=keyboard)


async def next_product(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data['current_index']
    product_ids = data['product_ids']
    if current_index < len(product_ids) - 1:
        await state.update_data(current_index=current_index + 1)
        await show_product(callback.message, state)
    else:
        await callback.answer("–ë–æ–ª—å—à–µ –∞—Å—Å–µ—Ç–æ–≤ –Ω–µ—Ç. üõë")
    await callback.answer()


async def prev_product(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data['current_index']
    if current_index > 0:
        await state.update_data(current_index=current_index - 1)
        await show_product(callback.message, state)
    else:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π –∞—Å—Å–µ—Ç. ‚èÆÔ∏è")
    await callback.answer()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 1 –∫–æ–ø–∏–∏)
async def add_to_cart_handler(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    cart_items = await get_cart_items(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞—Å—Å–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if any(item['product_id'] == product_id for item in cart_items):
        await callback.answer("–≠—Ç–æ—Ç –∞—Å—Å–µ—Ç —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ! –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ 1 –∫–æ–ø–∏—é. ‚úÖ", show_alert=True)
    else:
        await add_to_cart(user_id, product_id, quantity=1)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 1
        await callback.answer("–ê—Å—Å–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! ‚úÖ")
        await callback.message.edit_text("–ê—Å—Å–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu)


async def handle_random_text(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state and not message.text.startswith('/'):
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã. üîÑ",
                             reply_markup=main_menu)


async def send_asset_url(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[2])
    product = await get_product(product_id)
    if product[4] == 0:
        await callback.message.answer_document(document=product[6], caption="–í–æ—Ç –≤–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞—Å—Å–µ—Ç üåü")
    else:
        await callback.message.answer("–≠—Ç–æ—Ç –∞—Å—Å–µ—Ç –ø–ª–∞—Ç–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É. üõí")
    await callback.answer()


async def show_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cart_items = await get_cart_items(user_id)
    if not cart_items:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. üõí")
        return
    text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: üõçÔ∏è\n"
    total = 0
    for item in cart_items:
        product = await get_product(item['product_id'])
        text += f"{product[2]} x {item['quantity']} - {product[4] * item['quantity']:.2f} —Ä—É–±. üí∏\n"
        total += product[4] * item['quantity']
    text += f"–ò—Ç–æ–≥–æ: {total:.2f} —Ä—É–±. üí∞\n–í–∞—à –±–∞–ª–∞–Ω—Å: {await get_user_balance(user_id):.2f} —Ä—É–±. üí≥"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å üì¶", callback_data="checkout")],
        [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É üóëÔ∏è", callback_data="clear_cart")]
    ])
    await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()


async def clear_cart_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await clear_cart(user_id)
    await callback.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. üßπ")
    await callback.answer()


async def start_checkout(callback: types.CallbackQuery, state: FSMContext):
    logging.info("Starting checkout process for user %s", callback.from_user.id)
    user_id = callback.from_user.id
    cart_items = await get_cart_items(user_id)
    if not cart_items:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. üõí")
        return
    logging.info("Cart items retrieved: %s", cart_items)

    products = await asyncio.gather(*(get_product(item['product_id']) for item in cart_items))
    total_price = sum(product[4] * item['quantity'] for product, item in zip(products, cart_items))
    balance = await get_user_balance(user_id)
    if balance < total_price:
        await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. üí∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
        return

    order_id, error = await create_order(user_id, {'payment_method': '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'})
    if error:
        logging.error("Error creating order for user %s: %s", user_id, error)
        await callback.message.answer(error)
        return

    items = await get_order_items(order_id)
    order_summary = ""
    total = 0
    for item in items:
        product = await get_product(item['product_id'])
        subtotal = item['price_at_purchase'] * item['quantity']
        total += subtotal
        order_summary += f"{product[2]} x {item['quantity']} ‚Äî {subtotal:.2f} —Ä—É–±. üí∏\n"
    admin_text = (
        f"<b>üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n\n"
        f"<b>üí≥ –û–ø–ª–∞—Ç–∞:</b> –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n"
        f"<b>üõí –ê—Å—Å–µ—Ç—ã:</b>\n{order_summary}\n"
        f"<b>–ò—Ç–æ–≥–æ:</b> {total:.2f} —Ä—É–±. üí∞"
    )
    await bot.send_message(ADMIN_ID, admin_text)

    await callback.message.answer(
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üéâ\n–í–∞—à –±–∞–ª–∞–Ω—Å: {await get_user_balance(user_id):.2f} —Ä—É–±. üí≥")
    for item in items:
        product = await get_product(item['product_id'])
        for _ in range(item['quantity']):
            await callback.message.answer_document(document=product[6], caption=f"–í–∞—à –∞—Å—Å–µ—Ç: {product[2]} üåü")

    await clear_cart(user_id)


async def start_support(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SupportStates.waiting_for_question)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å: ‚ùì")
    await callback.answer()


async def forward_to_admin(message: types.Message, state: FSMContext):
    await bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. ‚úÖ")
    await state.clear()


async def start_add_product(message: types.Message, state: FSMContext):
    categories = await get_categories()
    if not categories:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é /add_category. ‚ö†Ô∏è")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for cat in categories:
        category_id, category_name = cat
        async with aiosqlite.connect('bot.db') as db:
            async with db.execute('SELECT section FROM categories WHERE id=?', (category_id,)) as cursor:
                row = await cursor.fetchone()
                section = row[0] if row else "unknown"
        button_text = f"{category_name} ({section})"
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=button_text, callback_data=f"add_product_cat_{category_id}")])
    await state.set_state(AddProductStates.category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: üìã", reply_markup=keyboard)


async def select_category(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[3])
    await state.update_data(category_id=category_id)
    await state.set_state(AddProductStates.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Å—Å–µ—Ç–∞:", reply_markup=types.ReplyKeyboardRemove())
    await callback.answer()


async def process_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddProductStates.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Å—Å–µ—Ç–∞: üìù")


async def process_product_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()
    category_id = data['category_id']

    async with aiosqlite.connect('bot.db') as db:
        async with db.execute('SELECT section FROM categories WHERE id=?', (category_id,)) as cursor:
            row = await cursor.fetchone()
            if row and row[0] == 'free':
                await state.update_data(price=0.0, is_free=1)
                await state.set_state(AddProductStates.photo)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∞—Å—Å–µ—Ç–∞: üì∏")
            else:
                await state.set_state(AddProductStates.price)
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞—Å—Å–µ—Ç–∞: üí∞")


async def process_product_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        if price < 0:
            await message.answer("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. ‚ö†Ô∏è")
            return
        await state.update_data(price=price)
        is_free = 1 if price == 0 else 0
        await state.update_data(is_free=is_free)
        await state.set_state(AddProductStates.photo)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∞—Å—Å–µ—Ç–∞: üì∏")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. ‚ö†Ô∏è")


async def process_product_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    await state.update_data(photo=file_id)
    await state.set_state(AddProductStates.asset_file)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∞—Å—Å–µ—Ç–∞ (.fbx, .jpg, .obj, .blend): üì§")


async def process_asset_file(message: types.Message, state: FSMContext):
    if message.document:
        file_name = message.document.file_name
        if file_name.lower().endswith(('.fbx', '.jpg', '.obj', '.blend')):
            file_id = message.document.file_id
            data = await state.get_data()
            await add_product(data['category_id'], data['name'],
                              data['description'], data['price'],
                              data['photo'], file_id,
                              data['is_free'])
            await message.answer("–ê—Å—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üòÑüéâ")
            await state.clear()
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .fbx, .jpg, .obj –∏–ª–∏ .blend.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .fbx, .jpg, .obj –∏–ª–∏ .blend.")


async def invalid_asset_file(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .fbx, .jpg, .obj –∏–ª–∏ .blend.")


async def start_delete_category(message: types.Message):
    categories = await get_categories()
    if not categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. üì≠")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat[1], callback_data=f"delete_category_{cat[0]}")] for cat in categories
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ‚ùå", reply_markup=keyboard)


async def confirm_delete_category(callback: types.CallbackQuery):
    category_id = int(callback.data.split("_")[2])
    await delete_category(category_id)
    await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–µ –µ—ë –∞—Å—Å–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã. ‚úÖ")
    await callback.answer()


async def start_delete_product(message: types.Message):
    categories = await get_categories()
    if not categories:
        await message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å–Ω–∞—á–∞–ª–∞. ‚ö†Ô∏è")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat[1], callback_data=f"select_delete_prod_cat_{cat[0]}")] for cat in categories
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞—Å—Å–µ—Ç–∞: üóÇÔ∏è", reply_markup=keyboard)


async def show_products_for_deletion(callback: types.CallbackQuery):
    category_id = int(callback.data.split("_")[-1])
    products = await get_products_by_category(category_id)
    if not products:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∞—Å—Å–µ—Ç–æ–≤. üì≠")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=p[2], callback_data=f"delete_product_{p[0]}")] for p in products
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Å–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ‚ùå", reply_markup=keyboard)
    await callback.answer()


async def confirm_delete_product(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[2])
    await delete_product(product_id)
    await callback.message.answer("–ê—Å—Å–µ—Ç —É–¥–∞–ª—ë–Ω. ‚úÖ")
    await callback.answer()